require 'thor'
require 'active_support/inflector'

class MvcGenerator < Thor

  attr_accessor :product, :name

  def self.source_root
    File.join(File.dirname(__FILE__), 'templates')
  end

  include Thor::Actions

  desc "mvc", "product name"

  def mvc(product, name)

    self.product = product
    self.name = name

    template "model.rb.erb", File.join(workflows_path, product, "#{name}_model.rb")
    template "view.rb.erb", File.join(workflows_path, product, "#{name}_view.rb")
    template "controller.rb.erb", File.join(workflows_path, product, "#{name}_controller.rb")

    append_to_file "#{workflows_path}/../workflows.rb" do
      "#{workflow_loader} '#{product.downcase}/#{name.downcase}'\n"
    end

  end

  no_commands do

    def workflows_path
      "lib/<%= name.downcase %>/workflows"
    end

    def workflow_loader
      "<%= name.camelize %>::Loader.load_workflow"
    end

    def create_modules
      product.split('/').zip(indents).map { |e| "#{e[1]}module #{e[0].camelize}" }.join("\n").strip
    end

    # for workflow a/b/c returns ["", "  ", "    "] spaces for formatting output
    def indents
      @indents ||= (i = [] and product.split('/').each_index { |e| i << e * 2 } and i.map { |e| "\s" * e })
    end

    def create_module_end
      indents.reverse.map { |e| "#{e}end" }.join("\n").strip
    end

  end

end

class MvcGeneratorOLDOLDOLD # < RubiGen::Base
  attr_reader :product, :name

  def initialize(runtime_args, runtime_options = {})
    super
    usage if args.empty?
    @product = args.shift
    @name = args.shift
    usage unless @name && @product
    @destination_root = File.expand_path(File.dirname(__FILE__) + '/../../')
    extract_options
  end

  def workflow_directory
    "lib/<%= name.downcase %>/workflows/#{@product}"
  end

  def manifest
    record do |m|
      create_directories(m)
      add_mvc_stubs m
      add_loader
      add_rake_task
    end
  end

  def add_mvc_stubs m
    m.template "model.rb.erb", File.join(workflow_directory, "#{@name}_model.rb")
    m.template "view.rb.erb", File.join(workflow_directory, "#{@name}_view.rb")
    m.template "controller.rb.erb", File.join(workflow_directory, "#{@name}_controller.rb")
  end

  def workflow_exists?
    File.directory? "../#{workflow_directory}"
  end

  def add_rake_task
    append_to_file "../rakefile.rb" do |f|
      f.puts "RakeHelper.cucumber_task(:#{@product}, \"features/#{@product}/**/*.feature\")"
    end
  end

  def add_loader
    append_to_file "../lib/<%= name.downcase %>/workflows.rb" do |f|
      f.puts "<%= name.camelize %>::Loader.load_workflow '#{@product.downcase}/#{@name.downcase}'"
    end
  end

  def append_to_file name, &block
    path = File.join(File.dirname(__FILE__), "..", name)
    File.open(path, 'a+') { |f| yield f }
  end

  def create_directories(m)
    m.directory workflow_directory
  end

  def create_modules
    @product.split('/').map { |x| "module #{x.camelize}\n" }.join.strip
  end

  def create_module_end
    @product.split('/').map { |x| "end\n" }.join.strip
  end

  protected
  def banner
    <<-EOS
USAGE: #{spec.name} path/for/your/test/mvc workflow_directory name [options]
    EOS
  end

  def after_generate
    mvc_file_path = "#{@destination_root}/#{workflow_directory}/#{@name}"
    RBeautify.new({}).beautify_file("#{mvc_file_path}_model.rb")
    RBeautify.new({}).beautify_file("#{mvc_file_path}_view.rb")
    RBeautify.new({}).beautify_file("#{mvc_file_path}_controller.rb")
  end

  def add_options!(opts)
    opts.separator ''
    opts.separator 'Options:'
    # For each option below, place the default
    # at the top of the file next to "default_options"
    # opts.on("-a", "--author=\"Your Name\"", String,
    #         "Some comment about this option",
    #         "Default: none") { |options[:author]| }
    opts.on("-v", "--version", "Show the #{File.basename($0)} version number and quit.")
  end

  def extract_options
    # for each option, extract it into a local variable (and create an "attr_reader :author" at the top)
    # Templates can access these value via the attr_reader-generated methods, but not the
    # raw instance variable value.
    # @author = options[:author]
  end

end